#Port 0 means the port will be assigned automatically
#server.port=0

#The port number wil be assigned from the command line and if not provided will be assigned automatically
server.port=${PORT:0}

spring.application.name=users-ws

#This property was moved to the config server to use username and password to register to Eureka.
# Remember config server has higher property than the local application.properties
eureka.client.serviceUrl.defaultZone = http://localhost:8010/eureka

spring.devtools.restart.enabled = true

#This property id required to start more than of instance of this Microservice and give it different instance name
#If spring.application.instance_id is not passed as an argument a random value will be given
# mvn spring-boot:run -Dspring.boot.run.arguments=--spring.application.instance_id=saleh
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}
eureka.instance.hostname=localhost

#To access H2 console visit http://localhost:8082/users-ws/h2-console
spring.h2.console.enabled=true
spring.h2.console.settings.web-allow-others=true
spring.datasource.username=sa
spring.datasource.password=sasa
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

gateway.ip = 192.168.1.108
# 10 days
token.expiration_time = 864000000
token.secret = hfgry463hf746hf573ydh475fhy5739
login.url.path = /users/login

#Configuration server
spring.config.import=optional:configserver:http://localhost:8012


#RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#Enables Actuator endpoints.
# "health" endpoint is required for resilience4j --> circuitbreaker
# "*" means all endpoints like beans,health,mappings,info...
management.endpoints.web.exposure.include=*

# The below properties were used for the resilience4j lessons
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

#Enables Feign Logging to see the date exchanged in Debug mode
logging.level.com.noures.usersclient.data.AlbumsServiceClient=DEBUG

#This property will the order of execution of the resilience4j modules. By default, it is Bulkhead , TimeLimiter , Rate Limiter, CircuitBreaker and the last on is the Retry
# The higher value = the higher priority.
resilience4j.circuitbreaker.circuit-breaker-aspect-order=1
## The properties say if 50%(failure-rate-threshold) of the 2 calls(sliding-window-size) failed the Circuit Breaker will open for 10s before it goes to half-open state
# failure-rate-threshold property configure the failure threshold in percentage before the Circuit breaker goes into the OPEN state
# and the name(albums-ws) must match the name in the @CircuitBreaker(name = "album-ws",...) in AlbumsServiceClient
resilience4j.circuitbreaker.instances.albums-ws.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.albums-ws.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.albums-ws.wait-duration-in-open-state=10s
# sliding-window property is used to set the type and size of the sliding-window used to record the outcome of the calls.
# "count_based" means it will count the number of calls (2 calls) then aggregate the result. "time_based" is the other option and wait for a certain period of time then aggregate the result.
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.albums-ws.sliding-window-size=2
# the minimum number of calls required per sliding window period before the Circuit Breaker can calculate the error rate
resilience4j.circuitbreaker.instances.albums-ws.minimum-number-of-calls=1
# this property is useful when monitoring Circuit Breaker event using the Actuator endpoints- you see the last 10 events
resilience4j.circuitbreaker.instances.albums-ws.event-consumer-buffer-size=10

# If the Circuit Breaker is open Retry will not execute!
# If the first try fails the second will be after 10s (exponential-backoff-multiplier * wait-duration) and so on
resilience4j.retry.retry-aspect-order=2
resilience4j.retry.instances.albums-ws.max-attempts=3
resilience4j.retry.instances.albums-ws.wait-duration=2s
resilience4j.retry.instances.albums-ws.enable-exponential-backoff=true
resilience4j.retry.instances.albums-ws.exponential-backoff-multiplier=5


albums.exceptions.albums-not-found=Albums Not Found!!


#Configuration for sleuth and zipkin
# zipkin Sever URL
spring.zipkin.base-url=http://localhost:9411
# Sending information to Zipkin can be done using HTTP, Kafak or RabbitMQ, in this case will use Http (web = Http)
spring.zipkin.sender.type=web
# This property dictate how much data will be sent. 1 means all 100% (0.9 = 90%). Default is 0%
spring.sleuth.sampler.probability=1


#logging.file.name=users-ws.log
logging.file.path=C:/TrainingAndLearning_MicroservicesLogs/UsersClient/users-ws-log
logging.level.com.noures.usersclient=DEBUG